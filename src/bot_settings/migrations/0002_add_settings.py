# Generated by Django 4.2.3 on 2023-07-21 08:19
from django.db import migrations

from bot_settings.models import BotSettings as BotSettingsModel


def create_donation_url_setting(apps, schema_editor):
    """Create donation_url setting instance."""
    BotSettings = apps.get_model("bot_settings", "BotSettings")
    BotSettings.objects.create(
        key="donation_url",
        title="Ссылка на страницу пожертвований",
        type=BotSettingsModel.URL,
        value="https://detskyfond.info/pomogi/",
    )


def remove_donation_url_setting(apps, schema_editor):
    """Remove donation_url setting instance."""
    BotSettings = apps.get_model("bot_settings", "BotSettings")
    setting = BotSettings.objects.get(key="donation_url")
    setting.delete()


def create_start_message_setting(apps, schema_editor):
    """Create start_message setting instance."""
    BotSettings = apps.get_model("bot_settings", "BotSettings")
    BotSettings.objects.create(
        key="start_message",
        title="Сообщение при нажатии на кнопку Start",
        type=BotSettingsModel.TEXT,
        value='Здравствуйте! Это бот фонда "Расправь крылья!".',
    )


def remove_start_message_setting(apps, schema_editor):
    """Remove start_message setting instance."""
    BotSettings = apps.get_model("bot_settings", "BotSettings")
    setting = BotSettings.objects.get(key="start_message")
    setting.delete()


def create_help_message_setting(apps, schema_editor):
    """Create help_message setting instance."""
    BotSettings = apps.get_model("bot_settings", "BotSettings")
    BotSettings.objects.create(
        key="help_message",
        title="Сообщение при нажатии на кнопку Help",
        type=BotSettingsModel.TEXT,
        value="Здесь выводится краткое описание возможностей бота (/help)",
    )


def remove_help_message_setting(apps, schema_editor):
    """Remove help_message setting instance."""
    BotSettings = apps.get_model("bot_settings", "BotSettings")
    setting = BotSettings.objects.get(key="help_message")
    setting.delete()


def create_assistance_message_setting(apps, schema_editor):
    """Create assistance_message setting instance."""
    BotSettings = apps.get_model("bot_settings", "BotSettings")
    BotSettings.objects.create(
        key="assistance_message",
        title="Сообщение при нажатии на кнопку 'Получить помощь'",
        type=BotSettingsModel.TEXT,
        value="Выберите нужный регион",
    )


def remove_assistance_message_setting(apps, schema_editor):
    """Remove assistance_message setting instance."""
    BotSettings = apps.get_model("bot_settings", "BotSettings")
    setting = BotSettings.objects.get(key="assistance_message")
    setting.delete()


def create_regions_pagination_setting(apps, schema_editor):
    """Create regions pagination setting instance."""
    BotSettings = apps.get_model("bot_settings", "BotSettings")
    BotSettings.objects.create(
        key="regions_pagination_setting",
        title="Количество регионов на одной странице",
        type=BotSettingsModel.INT,
        value=6,
    )


def remove_regions_pagination_setting(apps, schema_editor):
    """Remove regions pagination setting instance."""
    BotSettings = apps.get_model("bot_settings", "BotSettings")
    setting = BotSettings.objects.get(key="regions_pagination_setting")
    setting.delete()


def create_programs_pagination_setting(apps, schema_editor):
    """Create programs pagination setting instance."""
    BotSettings = apps.get_model("bot_settings", "BotSettings")
    BotSettings.objects.create(
        key="programs_pagination_setting",
        title="Количество программ на одной странице",
        type=BotSettingsModel.INT,
        value=6,
    )


def remove_programs_pagination_setting(apps, schema_editor):
    """Remove programs pagination setting instance."""
    BotSettings = apps.get_model("bot_settings", "BotSettings")
    setting = BotSettings.objects.get(key="programs_pagination_setting")
    setting.delete()


def create_questions_pagination_setting(apps, schema_editor):
    """Create questions pagination setting instance."""
    BotSettings = apps.get_model("bot_settings", "BotSettings")
    BotSettings.objects.create(
        key="questions_pagination_setting",
        title="Количество вопросов на одной странице",
        type=BotSettingsModel.INT,
        value=6,
    )


def remove_questions_pagination_setting(apps, schema_editor):
    """Remove questions pagination setting instance."""
    BotSettings = apps.get_model("bot_settings", "BotSettings")
    setting = BotSettings.objects.get(key="questions_pagination_setting")
    setting.delete()


def create_select_type_of_help_setting(apps, schema_editor):
    """Create select_type_of_help setting instance."""
    BotSettings = apps.get_model("bot_settings", "BotSettings")
    BotSettings.objects.create(
        key="select_type_of_help",
        title="Сообщение при нажатии на кнопку нужного региона",
        type=BotSettingsModel.TEXT,
        value="[Заглушка]Сообщение в момент выбора юр., соц., психол., помощи и т.д.",
    )


def remove_select_type_of_help_setting(apps, schema_editor):
    """Remove select_type_of_help setting instance."""
    BotSettings = apps.get_model("bot_settings", "BotSettings")
    setting = BotSettings.objects.get(key="select_type_of_help")
    setting.delete()


def create_selected_type_assistance_setting(apps, schema_editor):
    """Create selected_type_assistance setting instance."""
    BotSettings = apps.get_model("bot_settings", "BotSettings")
    BotSettings.objects.create(
        key="selected_type_assistance",
        title="Сообщение при нажатии на кнопку нужного типа помощи",
        type=BotSettingsModel.TEXT,
        value="Выбор вопроса из списка",
    )


def remove_selected_type_assistance_setting(apps, schema_editor):
    """Remove selected_type_assistance setting instance."""
    BotSettings = apps.get_model("bot_settings", "BotSettings")
    setting = BotSettings.objects.get(key="selected_type_assistance")
    setting.delete()


def create_ask_question_setting(apps, schema_editor):
    """Create ask_question setting instance."""
    BotSettings = apps.get_model("bot_settings", "BotSettings")
    BotSettings.objects.create(
        key="ask_question",
        title="Сообщение при нажатии на кнопку 'Задать свой вопрос'",
        type=BotSettingsModel.TEXT,
        value="Задайте Ваш вопрос",
    )


def remove_ask_question_setting(apps, schema_editor):
    """Remove ask_question setting instance."""
    BotSettings = apps.get_model("bot_settings", "BotSettings")
    setting = BotSettings.objects.get(key="ask_question")
    setting.delete()


def create_fund_programs_setting(apps, schema_editor):
    """Create fund_programs setting instance."""
    BotSettings = apps.get_model("bot_settings", "BotSettings")
    BotSettings.objects.create(
        key="fund_programs",
        title="Сообщение при нажатии на кнопку 'Наши программы'",
        type=BotSettingsModel.TEXT,
        value="Выбор программы из списка",
    )


def remove_fund_programs_setting(apps, schema_editor):
    """Remove fund_programs setting instance."""
    BotSettings = apps.get_model("bot_settings", "BotSettings")
    setting = BotSettings.objects.get(key="fund_programs")
    setting.delete()


def create_contact_with_us_setting(apps, schema_editor):
    """Create contact_with_us setting instance."""
    BotSettings = apps.get_model("bot_settings", "BotSettings")
    BotSettings.objects.create(
        key="contact_with_us",
        title="Сообщение при нажатии на кнопку 'Связаться с нами'",
        type=BotSettingsModel.TEXT,
        value="Выберите способ связи",
    )


def remove_contact_with_us_setting(apps, schema_editor):
    """Remove contact_with_us setting instance."""
    BotSettings = apps.get_model("bot_settings", "BotSettings")
    setting = BotSettings.objects.get(key="contact_with_us")
    setting.delete()


class Migration(migrations.Migration):
    """Initial migration for bot_settings app."""

    dependencies = [
        ("bot_settings", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(
            create_donation_url_setting,
            reverse_code=remove_donation_url_setting,
        ),
        migrations.RunPython(
            create_start_message_setting,
            reverse_code=remove_start_message_setting,
        ),
        migrations.RunPython(
            create_help_message_setting,
            reverse_code=remove_help_message_setting,
        ),
        migrations.RunPython(
            create_assistance_message_setting,
            reverse_code=remove_assistance_message_setting,
        ),
        migrations.RunPython(
            create_regions_pagination_setting,
            reverse_code=remove_regions_pagination_setting,
        ),
        migrations.RunPython(
            create_programs_pagination_setting,
            reverse_code=remove_programs_pagination_setting,
        ),
        migrations.RunPython(
            create_questions_pagination_setting,
            reverse_code=remove_questions_pagination_setting,
        ),
        migrations.RunPython(
            create_select_type_of_help_setting,
            reverse_code=remove_select_type_of_help_setting,
        ),
        migrations.RunPython(
            create_selected_type_assistance_setting,
            reverse_code=remove_selected_type_assistance_setting,
        ),
        migrations.RunPython(
            create_ask_question_setting,
            reverse_code=remove_ask_question_setting,
        ),
        migrations.RunPython(
            create_fund_programs_setting,
            reverse_code=remove_fund_programs_setting,
        ),
        migrations.RunPython(
            create_contact_with_us_setting,
            reverse_code=remove_contact_with_us_setting,
        ),
    ]
